<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mybatis.mapper.UserMapper">

    <resultMap id="UserResultMap" type="com.example.mybatis.model.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="email" property="email"/>
        <result column="age" property="age"/>
        <result column="created_at" property="createdAt"/>

        <!-- OneToOne mapping -->
        <association property="profile" javaType="com.example.mybatis.model.Profile">
            <id property="id" column="p_id"/>
            <result property="fullName" column="p_full_name"/>
            <result property="address" column="p_address"/>
        </association>

        <!-- ManyToMany mapping -->
        <collection property="roles" ofType="com.example.mybatis.model.Role">
            <id property="id" column="r_id"/>
            <result property="name" column="r_name"/>
        </collection>
    </resultMap>

    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT
            u.id, u.username, u.email,
            p.id AS p_id, p.full_name AS p_full_name, p.address AS p_address,
            r.id AS r_id, r.name AS r_name
        FROM users u
         LEFT JOIN profiles p ON u.id = p.user_id
         LEFT JOIN user_roles ur ON u.id = ur.user_id
         LEFT JOIN roles r ON ur.role_id = r.id
        WHERE u.id = #{id}
    </select>

    <select id="findAll" resultMap="UserResultMap">
        SELECT id, username, email, age, created_at
        FROM users
        ORDER BY id
    </select>

    <select id="getUsersByPage" resultMap="UserResultMap">
        SELECT u.id, u.username, u.email, u.age, u.created_at,
               p.id AS p_id, p.full_name AS p_full_name, p.address AS p_address,
               r.id AS r_id, r.name AS r_name
        FROM (
                 SELECT *
                 FROM users
                 WHERE (LOWER(username) LIKE CONCAT('%', LOWER(#{filter.keySearch}), '%')
                     OR LOWER(email) LIKE CONCAT('%', LOWER(#{filter.keySearch}), '%'))
                 ORDER BY created_at DESC
                     LIMIT #{filter.size} OFFSET #{offset}
             ) u
        LEFT JOIN profiles p ON u.id = p.user_id
        LEFT JOIN user_roles ur ON u.id = ur.user_id
        LEFT JOIN roles r ON ur.role_id = r.id
    </select>

    <select id="countUsers" parameterType="com.example.mybatis.request.UserFilter" resultType="long">
        SELECT COUNT(*)
        FROM users
        <where>
            <if test="keySearch != null and keySearch != ''">
                (LOWER(username) LIKE CONCAT('%', LOWER(#{keySearch}), '%')
                OR LOWER(email) LIKE CONCAT('%', LOWER(#{keySearch}), '%'))
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="com.example.mybatis.model.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, email, age, created_at)
        VALUES (#{username}, #{email}, #{age}, #{createdAt})
    </insert>

    <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, email, age, created_at)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (#{user.username}, #{user.email}, #{user.age}, #{user.createdAt})
        </foreach>
    </insert>

    <update id="update" parameterType="com.example.mybatis.model.User">
        UPDATE users
        SET username = #{username},
            email = #{email},
            age = #{age}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="long">
        DELETE FROM users WHERE id = #{id}
    </delete>
</mapper>
